name: WEB - Test and Deploy - prod

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'Test scenario tags'
env:
  DEPLOYMENT_NAME: knowlly-web-deployment # Add your deployment name here.
  IMAGE: knowlly-web
jobs:
  deployment-web:
    name: WEB 빌드, 푸쉬 후 개발에 배포
    runs-on: ubuntu-latest
    steps:
      - name: 소스코드 체크아웃
        uses: actions/checkout@v2

      - name: SHA 업데이트
        run: echo $GITHUB_SHA > $GITHUB_WORKSPACE/_meta

      - name: 이미지 태그 준비
        id: get-tag
        run: |
          tag=$(echo $GITHUB_SHA | head -c7)
          echo "::set-output name=tag::$tag"
      - name: 도커 캐싱 준비
        uses: docker/setup-buildx-action@v1

      - name: 도커 레이어 캐싱
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: 도커 로그인
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD

      - name: 컨테이너 이미지 빌드 및 이미지 푸쉬
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: docker.io/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE }}:${{ steps.get-tag.outputs.tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: 캐시 삭제
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      - name: 배포파일 업데이트
        run: TAG=${{ steps.get-tag.outputs.tag }} && sed -i 's|<IMAGE>|docker.io/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE }}:'${TAG}'|' $GITHUB_WORKSPACE/deployment/deployment-prod.yml

      - name: 환경변수 치환 후 최종 배포 파일 생성
        uses: danielr1996/envsubst-action@1.0.0
        with:
          input: deployment/deployment-prod.yml
          output: deploy.yml

      - name: 클러스터에 배포
        uses: NaLDo627/kubectl@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_PROD }}
        with:
          args: apply -f deploy.yml

      - name: 배포 확인
        uses: NaLDo627/kubectl@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_PROD }}
        with:
          args: '"rollout status deployment/${{ env.DEPLOYMENT_NAME }}"'
